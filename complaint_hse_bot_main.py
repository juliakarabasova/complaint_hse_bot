import random
import telebot
from telebot import types
from sqlalchemy import create_engine
from sqlalchemy_utils import database_exists, create_database
from sqlalchemy import Table, Column, Integer, String, MetaData, insert



engine = create_engine('sqlite:///complaint.db', echo=True, future=True)
meta = MetaData()
if not database_exists(engine.url):
    create_database(engine.url)


complaints = Table(
   'complaints', meta,
   Column('faculty', String),
   Column('course', Integer),
   Column('complaint', String),
)

meta.create_all(engine)



bot = telebot.TeleBot('5447325606:AAHnzgoU2_3X6dmY8_UNVa7umyizaSpJtGw')

course = ''
faculty = ''
complaint = ''


def memes_reader(path):
    with open(path, encoding='utf-8') as mf:
        memes = mf.readlines()
    return memes


@bot.message_handler(commands=['start'])
def start_message(message):
    bot.send_message(message.chat.id, """
–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∂–∞–ª–æ–± –∏ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç–æ–≤. 
–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –≤—ã—Å–∫–∞–∑–∞—Ç—å —Å–≤–æ—é –∂–∞–ª–æ–±—É –∏–ª–∏ –∫–æ–º–ª–∏–º–µ–Ω—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —É—á–µ–±—ã –≤ –ù–ò–£ –í–®–≠ –ù–ù.
–¢–∞–∫–∂–µ –º—ã –º–æ–∂–µ–º –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç–µ–±–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É –≤–≤–∏–¥–µ –º–µ–º–∞:)
–í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /button""")


@bot.message_handler(commands=['button'])
def buttons_message(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—ã—à–∫–µ")
    markup.add(item1)
    item2 = types.KeyboardButton("–ú–Ω–µ –Ω—É–∂–Ω–∞ –∫—Ä–∞—Å–Ω–∞—è –∫–Ω–æ–ø–∫–∞")
    markup.add(item2)
    item3 = types.KeyboardButton("–†–∞—Å—Å–º–µ—à–∏ –º–µ–Ω—è")
    markup.add(item3)
    bot.send_message(message.chat.id, '–ñ–º–∏ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –≤–Ω–∏–∑—É ‚Üì', reply_markup=markup)


def buttons_funny(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–•–æ—á—É –º–µ–º")
    markup.add(item1)
    item2 = types.KeyboardButton("–•–æ—á—É —Ü–∏—Ç–∞—Ç—É")
    markup.add(item2)
    bot.send_message(message.chat.id, '–ö–∞–∫ —è –º–æ–≥—É —Ç–µ–±—è —Ä–∞—Å—Å–º–µ—à–∏—Ç—å?', reply_markup=markup)


def buttons_more_funny(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–ï—â–µ –º–µ–º")
    markup.add(item1)
    item2 = types.KeyboardButton("–¢–µ–ø–µ—Ä—å —Ü–∏—Ç–∞—Ç—É")
    markup.add(item2)
    item3 = types.KeyboardButton("–û–±—Ä–∞—Ç–Ω–æ –≤ –º–µ–Ω—é")
    markup.add(item3)
    bot.send_message(message.chat.id, '–ß—Ç–æ-–Ω–∏–±—É–¥—å –µ—â–µ?', reply_markup=markup)
    bot.register_next_step_handler(message, send_meme)


def buttons_more_cites(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–ï—â–µ —Ü–∏—Ç–∞—Ç—É")
    markup.add(item1)
    item2 = types.KeyboardButton("–¢–µ–ø–µ—Ä—å –º–µ–º")
    markup.add(item2)
    item3 = types.KeyboardButton("–û–±—Ä–∞—Ç–Ω–æ –≤ –º–µ–Ω—é")
    markup.add(item3)
    bot.send_message(message.chat.id, '–ß—Ç–æ-–Ω–∏–±—É–¥—å –µ—â–µ?', reply_markup=markup)
    bot.register_next_step_handler(message, send_meme)


@bot.message_handler(func=lambda msg: msg.text in ["–ú–Ω–µ –Ω—É–∂–Ω–∞ –∫—Ä–∞—Å–Ω–∞—è –∫–Ω–æ–ø–∫–∞", "–†–∞—Å—Å–º–µ—à–∏ –º–µ–Ω—è", "–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—ã—à–∫–µ"])
def messages_button_reply(message):
    # –∫—Ä–∞—Å–Ω—É—é –∫–Ω–æ–ø–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    if message.text == "–ú–Ω–µ –Ω—É–∂–Ω–∞ –∫—Ä–∞—Å–Ω–∞—è –∫–Ω–æ–ø–∫–∞":
        bot.send_message(message.chat.id,
                         "https://lk.hse.ru/user-suggestions?_gl=1%2a1jiumcf%2a_ga%2aMTcwMjg1MTU3MS4xNjY5MjMwNzc1%2a_ga_P5QXNNXGKL%2aMTY2OTIzMDc3NC4xLjEuMTY2OTIzMDc5NC40MC4wLjA.")

    elif message.text == "–†–∞—Å—Å–º–µ—à–∏ –º–µ–Ω—è":
        buttons_funny(message)
        bot.register_next_step_handler(message, send_meme)

    elif message.text == "–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—ã—à–∫–µ":
        bot.send_message(message.chat.id, '–û–ø–∏—à–∏ —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É', reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, get_complaint)


def send_meme(message):
    global memes

    if message.text in ['–•–æ—á—É –º–µ–º', '–ï—â–µ –º–µ–º', '–¢–µ–ø–µ—Ä—å –º–µ–º']:
        bot.send_photo(message.chat.id, random.choice(memes), reply_markup=gen_markup())
        buttons_more_funny(message)

    elif message.text in ['–•–æ—á—É —Ü–∏—Ç–∞—Ç—É', '–ï—â–µ —Ü–∏—Ç–∞—Ç—É', '–¢–µ–ø–µ—Ä—å —Ü–∏—Ç–∞—Ç—É']:
        bot.send_message(message.chat.id, """
        ‚Äî –ú–æ–∂–µ—Ç –≥–µ—Ä–æ–∏–Ω –ø–æ–ø—Ä–æ–±—É–µ–º? –í—Å–µ –ª—É—á—à–µ, —á–µ–º –Ø–∑—ã–∫–æ–≤–æ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ —É—á–∏—Ç—å.
    ‚Äî –ê —Ç—ã –æ—Ç–∫—É–¥–∞ –∑–Ω–∞–µ—à—å? –£—á–∏–ª, —á—Ç–æ –ª–∏?""", reply_markup=gen_markup())
        buttons_more_cites(message)

    elif message.text == '–û–±—Ä–∞—Ç–Ω–æ –≤ –º–µ–Ω—é':
        buttons_message(message)


def gen_markup():
    markup = types.InlineKeyboardMarkup()
    markup.row_width = 2
    markup.add(types.InlineKeyboardButton("üëç", callback_data="cb_like"),
               types.InlineKeyboardButton("üëé", callback_data="cb_dislike"))
    return markup


@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    if call.data == "cb_like":
        # open the memes file and add link once again
        bot.answer_callback_query(call.id, "–†–∞–¥, —á—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å!")
    elif call.data == "cb_dislike":
        bot.answer_callback_query(call.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤, —É—á—Ç–µ–º!")


def get_complaint(message):
    global complaint
    complaint = message.text
    bot.send_message(message.chat.id, '–ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–µ—Å—Ç—Ä–∞—Ü–∏—é –ø—Ä–æ–±–ª–µ–º—ã, –Ω–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞ –∫–∞–∫–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ç—ã —É—á–∏—à—å—Å—è')
    bot.register_next_step_handler(message, get_faculty)


def get_faculty(message):
    global faculty
    faculty = message.text
    bot.send_message(message.chat.id, '–ù–∞ –∫–∞–∫–æ–º –∫—É—Ä—Å–µ —Ç—ã –æ–±—É—á–∞–µ—à—å—Å—è? (–î–ª—è –º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—ã –≤–≤–µ–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, 5 –∏–ª–∏ 6 —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ)')
    bot.register_next_step_handler(message, get_course)


def get_course(message):
    global course
    course = message.text
    insertion = insert(complaints).values(complaint=complaint, faculty=faculty, course=course)
    with engine.connect() as conn:
        conn.execute(insertion)
        conn.commit()
    bot.send_message(message.chat.id, '–°–ø–∞—Å–∏–±–æ, —Ç–≤–æ—è –∂–∞–ª–æ–±–∞ –∑–∞–ø–∏—Å–∞–Ω–∞!')
    buttons_message(message)


@bot.message_handler(content_types=['text'])
def echo(message):
    bot.send_message(message.chat.id, message.text)


if __name__ == '__main__':
    memes = memes_reader('memes.txt')
    bot.infinity_polling()
