import random
from collections import defaultdict

import pandas as pd
import telebot
from sqlalchemy import Table, Column, String, MetaData, insert, text
from sqlalchemy import create_engine
from sqlalchemy_utils import database_exists, create_database
from telebot import types


engine = create_engine('sqlite:///complaint.db', echo=True, future=True)
meta = MetaData()
if not database_exists(engine.url):
    create_database(engine.url)

complaints = Table(
   'complaints', meta,
   Column('faculty', String),
   Column('year', String),
   Column('complaint', String),
)

users = Table(
    'users', meta,
    Column('chat_id', String),
    Column('faculty', String),
    Column('specialisation', String),
    Column('year', String),
)

meta.create_all(engine)

bot = telebot.TeleBot('5447325606:AAHnzgoU2_3X6dmY8_UNVa7umyizaSpJtGw')

info_by_chat_id = defaultdict(defaultdict)


def buttons_funny(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–•–æ—á—É –º–µ–º")
    markup.add(item1)
    item2 = types.KeyboardButton("–•–æ—á—É —Ü–∏—Ç–∞—Ç—É")
    markup.add(item2)
    bot.send_message(message.chat.id, "–ö–∞–∫ —è –º–æ–≥—É —Ç–µ–±—è —Ä–∞—Å—Å–º–µ—à–∏—Ç—å?", reply_markup=markup)


@bot.message_handler(commands=['button'])
def buttons_message(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –í—ã—à–∫–µ")
    markup.add(item1)
    item2 = types.KeyboardButton("–ú–Ω–µ –Ω—É–∂–Ω–∞ –∫—Ä–∞—Å–Ω–∞—è –∫–Ω–æ–ø–∫–∞")
    markup.add(item2)
    item3 = types.KeyboardButton("–†–∞—Å—Å–º–µ—à–∏ –º–µ–Ω—è")
    markup.add(item3)
    item4 = types.KeyboardButton("–õ–∏—á–Ω–∞—è –ø–æ–º–æ—â—å")
    markup.add(item4)
    bot.send_message(message.chat.id, "–ñ–º–∏ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –≤–Ω–∏–∑—É ‚Üì", reply_markup=markup)


def buttons_more_cites(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–ï—â–µ —Ü–∏—Ç–∞—Ç—É")
    markup.add(item1)
    item2 = types.KeyboardButton("–¢–µ–ø–µ—Ä—å –º–µ–º")
    markup.add(item2)
    item3 = types.KeyboardButton("–û–±—Ä–∞—Ç–Ω–æ –≤ –º–µ–Ω—é")
    markup.add(item3)
    bot.send_message(message.chat.id, "–ß—Ç–æ-–Ω–∏–±—É–¥—å –µ—â–µ?", reply_markup=markup)
    bot.register_next_step_handler(message, send_meme)


def buttons_more_funny(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–ï—â–µ –º–µ–º")
    markup.add(item1)
    item2 = types.KeyboardButton("–¢–µ–ø–µ—Ä—å —Ü–∏—Ç–∞—Ç—É")
    markup.add(item2)
    item3 = types.KeyboardButton("–û–±—Ä–∞—Ç–Ω–æ –≤ –º–µ–Ω—é")
    markup.add(item3)
    bot.send_message(message.chat.id, "–ß—Ç–æ-–Ω–∏–±—É–¥—å –µ—â–µ?", reply_markup=markup)
    bot.register_next_step_handler(message, send_meme)


@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    if call.data == "cb_like":
        # open the memes file and add link once again
        bot.answer_callback_query(call.id, "–†–∞–¥, —á—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å!")
    elif call.data == "cb_dislike":
        bot.answer_callback_query(call.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤, —É—á—Ç–µ–º!")


def done_complaint(message):
    insertion = insert(complaints).values(
        complaint=info_by_chat_id[message.chat.id]['complaint'],
        faculty=info_by_chat_id[message.chat.id]['faculty'],
        year=info_by_chat_id[message.chat.id]['year']
    )
    with engine.connect() as conn:
        conn.execute(insertion)
        conn.commit()
    bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ, —Ç–≤–æ—è –∂–∞–ª–æ–±–∞ –∑–∞–ø–∏—Å–∞–Ω–∞!")
    buttons_message(message)


@bot.callback_query_handler(func=lambda call: True)
def faculty_handler(message):
    msg = message.text

    if msg == "–§–∞–∫—É–ª—å—Ç–µ—Ç –≥—É–º–∞–Ω–∏—Ç–∞—Ä–Ω—ã—Ö –Ω–∞—É–∫":
        info_by_chat_id[message.chat.id]['faculty'] = msg
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton("–§–∏–ª–æ–ª–æ–≥–∏—è"), types.KeyboardButton("–î–∏–∑–∞–π–Ω"))
        markup.add(types.KeyboardButton("–§—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –∏ –ø—Ä–∏–∫–ª–∞–¥–Ω–∞—è –ª–∏–Ω–≥–≤–∏—Å—Ç–∏–∫–∞"))
        markup.add(types.KeyboardButton("–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–µ —è–∑—ã–∫–∏ –∏ –º–µ–∂–∫—É–ª—å—Ç—É—Ä–Ω–∞—è –±–∏–∑–Ω–µ—Å-–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è"))
        markup.add(types.KeyboardButton("–ü—Ä–∏–∫–ª–∞–¥–Ω–∞—è –ª–∏–Ω–≥–≤–∏—Å—Ç–∏–∫–∞ –∏ —Ç–µ–∫—Å—Ç–æ–≤–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞"))
        markup.add(types.KeyboardButton("–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∏–ª–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏: –ø–æ—ç—Ç–∏–∫–∞, –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"))
        bot.reply_to(
            message=message,
            text='–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å–≤–æ—é –û–ü',
            reply_markup=markup
        )
        bot.register_next_step_handler(message, faculty_handler)
    elif msg == "–§–∞–∫—É–ª—å—Ç–µ—Ç –ø—Ä–∞–≤–∞":
        info_by_chat_id[message.chat.id]['faculty'] = msg
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton("–Æ—Ä–∏—Å–ø—Ä—É–¥–µ–Ω—Ü–∏—è"))
        markup.add(types.KeyboardButton("–ü—Ä–∞–≤–æ–≤–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –∏ –∑–∞—â–∏—Ç–∞ –±–∏–∑–Ω–µ—Å–∞"))
        bot.reply_to(
            message=message,
            text='–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å–≤–æ—é –û–ü',
            reply_markup=markup
        )
        bot.register_next_step_handler(message, faculty_handler)
    elif msg == "–§–∞–∫—É–ª—å—Ç–µ—Ç –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞":
        info_by_chat_id[message.chat.id]['faculty'] = msg
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton("–¶–∏—Ñ—Ä–æ–≤–æ–π –º–∞—Ä–∫–µ—Ç–∏–Ω–≥"), types.KeyboardButton("–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥"))
        markup.add(types.KeyboardButton("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–≤–∏—Ç–∏–µ–º –∫–æ–º–ø–∞–Ω–∏–∏"), types.KeyboardButton("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º"))
        markup.add(types.KeyboardButton("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å–æ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö"))
        markup.add(types.KeyboardButton("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º–∏ –∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏"))
        bot.reply_to(
            message=message,
            text='–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å–≤–æ—é –û–ü',
            reply_markup=markup
        )
        bot.register_next_step_handler(message, faculty_handler)
    elif msg == "–§–∞–∫—É–ª—å—Ç–µ—Ç —ç–∫–æ–Ω–æ–º–∏–∫–∏":
        info_by_chat_id[message.message.chat.id]['faculty'] = msg
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton("–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π –±–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç –ø–æ –±–∏–∑–Ω–µ—Å—É –∏ —ç–∫–æ–Ω–æ–º–∏–∫–µ"))
        markup.add(types.KeyboardButton("–§–∏–Ω–∞–Ω—Å—ã"))
        bot.reply_to(
            message=message,
            text='–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å–≤–æ—é –û–ü',
            reply_markup=markup
        )
        bot.register_next_step_handler(message, faculty_handler)
    elif msg == "–§–∞–∫—É–ª—å—Ç–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∏, –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏ –∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã—Ö –Ω–∞—É–∫":
        info_by_chat_id[message.chat.id]['faculty'] = msg
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton("–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–µ –Ω–∞—É–∫–∏ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"), types.KeyboardButton("–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞"))
        markup.add(types.KeyboardButton("–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö"), types.KeyboardButton("–ë–∏–∑–Ω–µ—Å-–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞"))
        markup.add(types.KeyboardButton("–ú–∞–≥–∏—Å—Ç—Ä –ø–æ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–º—É –∑—Ä–µ–Ω–∏—é"))
        bot.reply_to(
            message=message,
            text='–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å–≤–æ—é –û–ü',
            reply_markup=markup
        )
        bot.register_next_step_handler(message, faculty_handler)
    elif msg in [str(i) for i in range(1, 5)]:
        info_by_chat_id[message.chat.id]['year'] = msg
        insertion = insert(users).values(
            chat_id=message.chat.id,
            faculty=info_by_chat_id[message.chat.id]['faculty'],
            specialisation=info_by_chat_id[message.chat.id]['specialisation'],
            year=info_by_chat_id[message.chat.id]['year']
        )
        with engine.connect() as conn:
            conn.execute(insertion)
            conn.commit()

        if info_by_chat_id[message.chat.id]['action'] == 'help':
            bot.register_next_step_handler(message, help_handler)
        elif info_by_chat_id[message.chat.id]['action'] == 'complaint':
            bot.register_next_step_handler(message, done_complaint)
    else:
        info_by_chat_id[message.chat.id]['specialisation'] = msg
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=6)
        for i in range(1, 5):
            markup.add(types.KeyboardButton(str(i)))
        bot.reply_to(
            message=message,
            text='–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π –∫—É—Ä—Å',
            reply_markup=markup
        )
        bot.register_next_step_handler(message, faculty_handler)


def faculty_markup():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("–§–∞–∫—É–ª—å—Ç–µ—Ç –≥—É–º–∞–Ω–∏—Ç–∞—Ä–Ω—ã—Ö –Ω–∞—É–∫"), types.KeyboardButton("–§–∞–∫—É–ª—å—Ç–µ—Ç –ø—Ä–∞–≤–∞"))
    markup.add(types.KeyboardButton("–§–∞–∫—É–ª—å—Ç–µ—Ç –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞"), types.KeyboardButton("–§–∞–∫—É–ª—å—Ç–µ—Ç —ç–∫–æ–Ω–æ–º–∏–∫–∏"))
    markup.add(types.KeyboardButton("–§–∞–∫—É–ª—å—Ç–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∏, –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏ –∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã—Ö –Ω–∞—É–∫"))
    return markup


# @bot.message_handler(content_types=["text"])
# def echo(message):
#     bot.send_message(message.chat.id, message.text)


def gen_markup():
    markup = types.InlineKeyboardMarkup()
    markup.row_width = 2
    markup.add(
        types.InlineKeyboardButton("üëç", callback_data="cb_like"),
        types.InlineKeyboardButton("üëé", callback_data="cb_dislike")
    )
    return markup


def get_complaint(message):
    info_by_chat_id[message.chat.id]['complaint'] = message.text
    with engine.connect() as conn:
        res = conn.execute(text(f'select * from users where chat_id = {message.chat.id}')).fetchall()
    if res:
        print(res)
        info_by_chat_id[message.chat.id]['faculty'] = res[0][1]
        info_by_chat_id[message.chat.id]['specialisation'] = res[0][2]
        info_by_chat_id[message.chat.id]['year'] = res[0][3]
        done_complaint(message)
    else:
        bot.send_message(
            message.chat.id,
            "–ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø—Ä–æ–±–ª–µ–º—ã, –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç",
            reply_markup=faculty_markup()
        )
        info_by_chat_id[message.chat.id]['action'] = 'complaint'
        bot.register_next_step_handler(message, faculty_handler)


@bot.callback_query_handler(func=lambda call: True)
def help_handler(message):
    global mails
    info = mails[mails["–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"] == info_by_chat_id[message.chat.id]["specialisation"]]
    if info.empty:
        bot.send_message(message.chat.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–≤–æ–µ–π –û–ü –µ—â–µ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ")
        buttons_message(message)

    if message.text == "–ü–æ–º–æ—â—å –¥–µ–∫–∞–Ω–∞—Ç–∞":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton("–ù–æ–º–µ—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –û–ü"))
        markup.add(types.KeyboardButton("–ü–æ—á—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –û–ü"))
        markup.add(types.KeyboardButton("–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –¥–µ–∫–∞–Ω–∞—Ç–∞"))
        markup.add(types.KeyboardButton("–û–±—Ä–∞—Ç–Ω–æ –≤ –º–µ–Ω—é"))
        bot.reply_to(
            message=message,
            text="–í—ã–±–µ—Ä–∏ —Ç–∏–ø –ø–æ–º–æ—â–∏",
            reply_markup=markup
        )
        bot.register_next_step_handler(message, help_handler)

    elif message.text == "–ü–æ–º–æ—â—å –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton("–ù–æ–º–µ—Ä –∞–∫–∞–¥–µ–º–∏—á–µc–∫–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è"))
        markup.add(types.KeyboardButton("–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏ –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è"))
        markup.add(types.KeyboardButton("–ü–æ—á—Ç–∞ –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è"))
        markup.add(types.KeyboardButton("–û–±—Ä–∞—Ç–Ω–æ –≤ –º–µ–Ω—é"))
        bot.reply_to(
            message=message,
            text="–í—ã–±–µ—Ä–∏ —Ç–∏–ø –ø–æ–º–æ—â–∏",
            reply_markup=markup
        )
        bot.register_next_step_handler(message, help_handler)

    elif message.text == "–ù–æ–º–µ—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –û–ü":
        bot.reply_to(
            message=message,
            text=f'{info["–§–ò–û –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –û–ü"].item()}\n'
                 f'{info["–ù–æ–º–µ—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –û–ü"].item()}'
        )
        # todo: –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –µ—â–µ –ø–æ–º–æ—â—å –¥—Ä—É–≥–∏–µ –æ–ø—Ü–∏–∏
        buttons_message(message)
    elif message.text == "–ü–æ—á—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –û–ü":
        bot.reply_to(
            message=message,
            text=f'{info["–§–ò–û –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –û–ü"].item()}\n'
                 f'{info["–ü–æ—á—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –û–ü"].item()}'
        )
        buttons_message(message)
    elif message.text == "–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –¥–µ–∫–∞–Ω–∞—Ç–∞":
        bot.reply_to(
            message=message,
            text=f'{info["–§–ò–û –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –û–ü"].item()}\n'
                 f'{info["–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –¥–µ–∫–∞–Ω–∞—Ç–∞"].item()}'
        )
        buttons_message(message)

    elif message.text == "–ù–æ–º–µ—Ä –∞–∫–∞–¥–µ–º–∏—á–µc–∫–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è":
        bot.reply_to(
            message=message,
            text=f'{info["–§–ò–û –∞–∫–∞–¥–µ–º–∏—á–µc–∫–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è"].item()}\n'
                 f'{info["–ù–æ–º–µ—Ä –∞–∫–∞–¥–µ–º–∏—á–µc–∫–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è"].item()}'
        )
        buttons_message(message)
    elif message.text == "–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏ –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è":
        bot.reply_to(
            message=message,
            text=f'{info["–§–ò–û –∞–∫–∞–¥–µ–º–∏—á–µc–∫–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è"].item()}\n' +
                 "\n".join(info["–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏ –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è"].item().split(", "))
        )
        buttons_message(message)
    elif message.text == "–ü–æ—á—Ç–∞ –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è":
        bot.reply_to(
            message=message,
            text=f'{info["–§–ò–û –∞–∫–∞–¥–µ–º–∏—á–µc–∫–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è"].item()}\n'
                 f'{info["–ü–æ—á—Ç–∞ –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è"].item()}'
        )
        buttons_message(message)

    elif message.text == "–û–±—Ä–∞—Ç–Ω–æ –≤ –º–µ–Ω—é":
        buttons_message(message)


def help_type(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–ü–æ–º–æ—â—å –¥–µ–∫–∞–Ω–∞—Ç–∞")
    markup.add(item1)
    item2 = types.KeyboardButton("–ü–æ–º–æ—â—å –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è")
    markup.add(item2)
    item3 = types.KeyboardButton("–û–±—Ä–∞—Ç–Ω–æ –≤ –º–µ–Ω—é")
    markup.add(item3)
    bot.send_message(message.chat.id, "–ß—å—è –ø–æ–º–æ—â—å —Ç–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞?", reply_markup=markup)
    bot.register_next_step_handler(message, help_handler)


def memes_reader(path):
    with open(path, encoding='utf-8') as mf:
        memes = mf.readlines()
    return memes


@bot.message_handler(func=lambda msg: msg.text in (
        "–ú–Ω–µ –Ω—É–∂–Ω–∞ –∫—Ä–∞—Å–Ω–∞—è –∫–Ω–æ–ø–∫–∞", "–†–∞—Å—Å–º–µ—à–∏ –º–µ–Ω—è", "–õ–∏—á–Ω–∞—è –ø–æ–º–æ—â—å", "–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –í—ã—à–∫–µ"
))
def messages_button_reply(message):
    # –∫—Ä–∞—Å–Ω—É—é –∫–Ω–æ–ø–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    if message.text == "–ú–Ω–µ –Ω—É–∂–Ω–∞ –∫—Ä–∞—Å–Ω–∞—è –∫–Ω–æ–ø–∫–∞":
        bot.send_message(
            message.chat.id,
            "[–°—Å—ã–ª–∫–∞ –Ω–∞ –∫—Ä–∞—Å–Ω—É—é –∫–Ω–æ–ø–∫—É]"
            "(https://lk.hse.ru/user-suggestions?_gl=1%2a1jiumcf%2a_ga%2aMTcwMjg1MTU3MS4xNjY5MjMwNzc1%2a_"
            "ga_P5QXNNXGKL%2aMTY2OTIzMDc3NC4xLjEuMTY2OTIzMDc5NC40MC4wLjA.)",
            parse_mode="MarkdownV2"
        )

    elif message.text == "–†–∞—Å—Å–º–µ—à–∏ –º–µ–Ω—è":
        buttons_funny(message)
        bot.register_next_step_handler(message, send_meme)

    elif message.text == "–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –í—ã—à–∫–µ":
        bot.send_message(message.chat.id, "–û–ø–∏—à–∏ —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É", reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, get_complaint)

    elif message.text == "–õ–∏—á–Ω–∞—è –ø–æ–º–æ—â—å":
        with engine.connect() as conn:
            res = conn.execute(text(f'select * from users where chat_id = {message.chat.id}')).fetchall()
        if res:
            print(res)
            info_by_chat_id[message.chat.id]['specialisation'] = res[0][2]
            help_type(message)
        else:
            bot.send_message(
                message.chat.id,
                "–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç",
                reply_markup=faculty_markup()
            )
            info_by_chat_id[message.chat.id]['action'] = 'help'
            bot.register_next_step_handler(message, faculty_handler)


def send_meme(message):
    global memes

    if message.text in ["–•–æ—á—É –º–µ–º", "–ï—â–µ –º–µ–º", "–¢–µ–ø–µ—Ä—å –º–µ–º"]:
        bot.send_photo(message.chat.id, random.choice(memes), reply_markup=gen_markup())
        buttons_more_funny(message)

    elif message.text in ["–•–æ—á—É —Ü–∏—Ç–∞—Ç—É", "–ï—â–µ —Ü–∏—Ç–∞—Ç—É", "–¢–µ–ø–µ—Ä—å —Ü–∏—Ç–∞—Ç—É"]:
        # todo: add more citations
        bot.send_message(
            message.chat.id,
            "‚Äî –ú–æ–∂–µ—Ç –≥–µ—Ä–æ–∏–Ω –ø–æ–ø—Ä–æ–±—É–µ–º? –í—Å–µ –ª—É—á—à–µ, —á–µ–º –Ø–∑—ã–∫–æ–≤–æ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ —É—á–∏—Ç—å.\n"
            "‚Äî –ê —Ç—ã –æ—Ç–∫—É–¥–∞ –∑–Ω–∞–µ—à—å? –£—á–∏–ª, —á—Ç–æ –ª–∏?",
            reply_markup=gen_markup()
        )
        buttons_more_cites(message)

    elif message.text == "–û–±—Ä–∞—Ç–Ω–æ –≤ –º–µ–Ω—é":
        buttons_message(message)


@bot.message_handler(commands=['start'])
def start_message(message):
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∂–∞–ª–æ–± –∏ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç–æ–≤.\n"
        "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –≤—ã—Å–∫–∞–∑–∞—Ç—å —Å–≤–æ—é –∂–∞–ª–æ–±—É –∏–ª–∏ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —É—á–µ–±—ã –≤ –ù–ò–£ –í–®–≠ –ù–ù.\n"
        "–¢–∞–∫–∂–µ –º—ã –º–æ–∂–µ–º –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç–µ–±–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É –≤ –≤–∏–¥–µ –º–µ–º–∞:)\n"
        "–í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /button"
    )


if __name__ == "__main__":
    memes = memes_reader("memes.txt")
    mails = pd.read_csv('mails.csv')
    bot.infinity_polling()
